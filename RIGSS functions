###########################################
#CREATE RULES FUNCTIONS
#The sub-elements that can be used to make up the rules
vars <- c("A", "B", "C", "D", "E", "F", "G") #These are the variables from the agent based model
#For the meaning of each, see lab notes 16.10.23
operators <- c("+", "-" , "/", "*","|", "&")
equals <- c("==", ">", "<", "!=", "<=", ">=")


# Define a basic structure for a binary tree node
node <- function(value, left = NULL, right = NULL) {
  return(list(value = value, left = left, right = right))
}


# Function to create a random binary tree with the specified depth
create_random_binary_tree <- function(max_depth) {
  if (max_depth == 0) { #|| runif(1) < 0.2) { ##if included this will sometimes make trees with just one node
    return(node(sample(vars, 1)))  # Return a leaf node
  }
  value <- sample(operators, 1)  
  left_subtree <- create_random_binary_tree(max_depth - 1)
  right_subtree <- create_random_binary_tree(max_depth - 1)
  return(node(value, left_subtree, right_subtree))
}


# Function to perform an inorder traversal and print the tree with brackets around pairs of leaf nodes and their parent
#root is rule[[i]]
ruleToText <- function(root) {
  if (!is.null(root)) {
    if (!is.null(root$left) && is.null(root$left$left) && is.null(root$left$right) &&
        !is.null(root$right) && is.null(root$right$left) && is.null(root$right$right)) {
      cat("(", root$left$value, " ", root$value, " ", root$right$value, ") ")
    } else {
      ruleToText(root$left)
      cat(root$value, " ")
      ruleToText(root$right)
    }
  }
}
#To use:
#ruleToText(x[[1]])


#function to create the initial population of rules
createRules <- function(n){
rules <- list()
for (i in 1:n){
random_tree <- create_random_binary_tree(sample(1:4,1))
random_tree[1] <- sample(equals, 1)
rules[[i]] <- random_tree
}
return(rules)
}
#To run a rule use:
#eval(parse(text = population[1]))


# Function to print a binary tree visually, each node printed only once
print_binary_tree <- function(node, level = 0, visited_nodes = c()) {
  if (!is.null(node) && !(node$value %in% visited_nodes)) {
    cat(paste(rep("  ", level), node$value, "\n"))
    visited_nodes <- c(visited_nodes, node$value)
    visited_nodes <- print_binary_tree(node$left, level + 1, visited_nodes)
    visited_nodes <- print_binary_tree(node$right, level + 1, visited_nodes)
  }
  return(visited_nodes)
}


# Function to replace "A" with "B" in a binary tree
#This is point mutation
mutate <- function(root, toReplace, replaceValue) {
  if (is.null(root)) {
    return(NULL)
  }
  
  # Check if the current node's value is "A"
  if (root$value == toReplace) {
    root$value <- replaceValue  # Replace "A" with "B"
  }
  
  # Recursively process the left and right subtrees
  root$left <- mutate(root$left, toReplace, replaceValue)
  root$right <- mutate(root$right, toReplace, replaceValue)
  
  return(root)
}

#to use:
#unlist rule
#y <- unlist(x[[1]])
#r <- sample(y,1)[[1]]

#figure out type
#rv <- choose what to replace it with

#m <- list()
#m[[1] <- mutate(x[[1]], r, rv)


#To prepare a rule for running:
getStringRule <- function(root) {
  if (is.null(root)) {
    return("")
  } else if (!is.null(root$left) && is.null(root$left$left) && is.null(root$left$right) &&
             !is.null(root$right) && is.null(root$right$left) && is.null(root$right$right)) {
    return(paste("(", root$left$value, " ", root$value, " ", root$right$value, ") "))
  } else {
    left_str <- getStringRule(root$left)
    right_str <- getStringRule(root$right)
    return(paste(left_str, root$value, right_str))
  }
}


#Crossover functions:
#########################

replace_subtree <- function(parent, direction, new_subtree) {
  if (length(direction) == 0) {
    return(new_subtree)
  } else {
    first_direction <- direction[1]
    rest_direction <- direction[-1]
    if (first_direction == "left") {
      parent$left <- replace_subtree(parent$left, rest_direction, new_subtree)
    } else {
      parent$right <- replace_subtree(parent$right, rest_direction, new_subtree)
    }
    return(parent)
  }
}


find_paths_to_nodes <- function(tree, target) {
  find_paths_to_nodes_recursive(tree, target, character(0), list())
}

find_paths_to_nodes_recursive <- function(tree, target, current_path, result) {
  if (is.null(tree)) {
    return(result)
  }
  
  if (tree$value == target) {
    result[[length(result) + 1]] <- current_path
  }
  
  result <- find_paths_to_nodes_recursive(tree$left, target, c(current_path, "left"), result)
  result <- find_paths_to_nodes_recursive(tree$right, target, c(current_path, "right"), result)
  
  return(result)
}

