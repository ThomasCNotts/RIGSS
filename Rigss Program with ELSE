#################################################

#load up the fuctions:
source("/Users/liztc/Documents/IGSS/IGSS Code/Agent Model")
source("/Users/liztc/Documents/IGSS/IGSS Code/RIGSS functions")

#describe the target reference dataset
#equality
#target <- rep(100,100)

#inequality
#target <- c(900, rep(377,9), rep(122, 39), rep(18,51))
target <- c(rep(150, 50), rep(50,50))

#to store the best rules:
bestRules <- list()
bestFit <- c(999,999,999,999,999) #we are storing 5 top rules here
bestTake <- c()
bestElseTake <- c()

#EVOLVE RULES

#create first population of rules
pop <- 500

rules <- createRules(pop)

#the rules need an conclusion (value after 'then'):
thenTake <- c()
elseTake <- c()
for (i in 1:pop){
thenTake[i] <- sample(0:10,1) #the value after then for each rule
elseTake[i] <- sample(0:10,1)
}

#start generation loop to create each population generation - what is the stopping condition?
for (generation in 1:100){

#start rules loop to test each rule
fitness <- c()
for (i in 1:length(rules)){

agentCommand <- getStringRule(rules[[i]])
agentCommand <- paste("if (", agentCommand, ") {agents[[i]]@take <- ", thenTake[i], "} else {agents[[i]]@take <- ", elseTake[i], "}")

#remember, to run:
#eval(parse(text = rule))

#run ABM here for one rule here
try(goldDist <- hawkDove(agentCommand), silent=TRUE)

#test for fitness
if (exists("goldDist")){
mat <- rbind(target, sort(goldDist, decreasing=TRUE))
fitness[i] <- dist(mat, method="euclidean")}
#end us with a vector of fitnesses called fitness
#use dist()

}

#################################################
#remove rules that have just one node, and rules that are null
#also remove the 'then...' value and the fitness
toRemove <- c()
for (k in 1:length(rules)){
if (oneNode(rules[[k]])) {toRemove <- c(toRemove, k)}
if (nullRule(rules[[k]])) {toRemove <- c(toRemove, k)}
}
if (length(toRemove > 0)) {
rules <- rules[-toRemove]
thenTake <- thenTake[-toRemove]
elseTake <- elseTake[-toRemove]
fitness <- fitness[-toRemove]
}

#################################################
#Store the best rule if it gets into the Top 5 rules
if (any(which(bestFit > min(fitness, na.rm=TRUE)))){
ruleInd <- sample(which(fitness == min(fitness, na.rm=TRUE)),1)
bestInd <- sample(which(bestFit > min(fitness, na.rm=TRUE)),1)
bestFit[bestInd] <- fitness[ruleInd]
bestRules[bestInd] <- rules[ruleInd]
bestTake[bestInd] <- thenTake[ruleInd]
bestElseTake[bestInd] <- elseTake[ruleInd]
}
#################################################

#replace NAs in fitness with 0 so they have zero probability
fitness[is.na(fitness)] <- 0

for (t in 1:length(fitness)){
if (fitness[t] > 0) {fitness[t] <- 1 / fitness[t]}
}

#################################################
#genetic operations here to build up a new population

tempRules <- list() #this will hold the new generation of rules
tempTake <- c()
tempElseTake <- c()
counter <- 0

for (i in 1:pop){ #this is to create the next generation of rules - it will end up bigger as crossover creates two rules

counter <- counter + 1

#choose an operation - reproduction, mutation, crossover
choice <- sample(c("reproduction", "mutation", "crossover"), 1)

if (choice == "reproduction"){

sampledRule <- sample(1:length(rules),1, prob=fitness)
#we need the index of the rule, rather than just straight to the rule itself
#because we need to know the thenTake value
tempRules[[counter]] <- rules[[sampledRule]]
tempTake[counter] <- thenTake[sampledRule]
tempElseTake[counter] <- elseTake[sampledRule]

} else if (choice == "mutation"){
sampledRule <- sample(1:length(rules),1, prob=fitness) #    , prob=fitness)
chosenRule <- rules[[sampledRule]]     
#this is point mutation but many others exist
#to use:
#unlist rule

y <- unlist(chosenRule)

#choose something to mutate, r for replace (rv is replacement value)
r <- sample(y,1)[[1]]

#figure out type of r
if (any(vars == r)) {rv <- sample(vars,1)
} else if (any(operators == r)) {rv <- sample(operators,1)
} else {
rv <- sample(equals,1)
}

m <- list()
tempRules[[counter]] <- mutate(root = chosenRule, toReplace = r, replaceValue = rv)
tempTake[counter] <- thenTake[sampledRule]
tempElseTake[counter] <- elseTake[sampledRule]

} else if (choice == "crossover"){

sampledRule1 <- sample(1:length(rules),1, prob=fitness) #prob=fitness
sampledRule2 <- sample(1:length(rules),1, prob=fitness) #prob=fitness

rule1 <- rules[[sampledRule1]]
rule2 <- rules[[sampledRule2]]

r1String <- getStringRule(rule1)
r2String <- getStringRule(rule2)

if (any(operators %in% unlist(strsplit(r1String, ""))) & any(operators %in% unlist(strsplit(r2String, "")))) {
op1 <- sample(operators[operators %in% unlist(strsplit(r1String, ""))],1)
op2 <- sample(operators[operators %in% unlist(strsplit(r2String, ""))],1)

subtrees1 <- find_paths_to_nodes(rule1, op1)
subtrees2 <- find_paths_to_nodes(rule2, op2)

subtree1Path <- subtrees1[[sample(1:length(subtrees1),1)]]
subtree2Path <- subtrees2[[sample(1:length(subtrees2),1)]]

co1 <- get_subtree(rule1,subtree1Path)
co2 <- get_subtree(rule2,subtree2Path)

newRule1 <- replace_subtree(rule1, subtree1Path, co2)
tempRules[[counter]] <- newRule1
tempTake[counter] <- thenTake[sampledRule1]
tempElseTake[counter] <- elseTake[sampledRule1]

counter <- counter + 1

newRule2 <- replace_subtree(rule2, subtree2Path, co1)
tempRules[[counter]] <- newRule2
tempTake[counter] <- thenTake[sampledRule2]
tempElseTake[counter] <- elseTake[sampledRule2]

}#end of if any...

}#end of crossover

}

rules <- tempRules
thenTake <- tempTake
elseTake <- tempElseTake

}







